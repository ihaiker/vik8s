namespace: kube-system;

PodSecurityPolicy:policy/v1beta1 psp.flannel.unprivileged {
    annotations {
        seccomp.security.alpha.kubernetes.io/allowedProfileNames: "docker/default";
        seccomp.security.alpha.kubernetes.io/defaultProfileName: "docker/default";
        apparmor.security.beta.kubernetes.io/allowedProfileNames: "runtime/default";
        apparmor.security.beta.kubernetes.io/defaultProfileName: "runtime/default";
    }
    privileged: false;
    readOnlyRootFilesystem: false;

    volumes: configMap secret emptyDir hostPath;

    allowedHostPaths pathPrefix=/etc/cni/net.d;
    allowedHostPaths pathPrefix=/etc/kube-flannel;
    allowedHostPaths pathPrefix=/run/flannel;

    runAsUser: rule=RunAsAny;
    supplementalGroups: rule:RunAsAny;
    fsGroup: rule:RunAsAny;

    # Privilege Escalation
    allowPrivilegeEscalation: false;
    defaultAllowPrivilegeEscalation: false;

    # Capabilities
    allowedCapabilities: 'NET_ADMIN' 'NET_RAW';
    hostPID: false;
    hostIPC: false;
    hostNetwork: true;
    hostPorts: min=0 max=65535;
    seLinux rule=RunAsAny;
}

ClusterRole:rbac.authorization.k8s.io/v1beta1 flannel {
    rules {
        apiGroups: 'extensions';
        resources: 'podsecuritypolicies';
        verbs: 'use';
        resourceNames: 'psp.flannel.unprivileged';
    }
    rules {
        apiGroups: "";
        resources: pods;
        verbs:  get;
    }
    rules {
        apiGroups: "";
        resources: nodes;
        verbs: list watch;
    }
    rules {
        apiGroups: "";
        resources: "nodes/status";
        verbs: patch;
    }
}

ClusterRoleBinding:rbac.authorization.k8s.io/v1beta1 flannel {
    roleRef {
        apiGroup: "rbac.authorization.k8s.io";
        kind: ClusterRole;
        name: flannel;
    }
    subjects {
        kind: ServiceAccount;
        name: flannel;
        namespace: kube-system;
    }
}

ServiceAccount:v1 flannel;

ConfigMap kube-flannel-cfg {
    cni-conf.json: '
        {
            "name": "cbr0",
            "cniVersion": "0.3.1",
            "plugins": [{
                "type": "flannel",
                "delegate": {
                    "hairpinMode": true,
                    "isDefaultGateway": true
                }
             },{
                "type": "portmap",
                "capabilities": {
                    "portMappings": true
                }
            }]
        }
    ';
    net-conf.json: '
        {
            "Network": "{{ .CIDR }}",
            "Backend": {
                "Type": "vxlan"
            }
        }
    ';
}

DaemonSet kube-flannel-ds {
    labels {
        tier: node;
        app: flannel;
    }

    affinity node required {
        nodeSelectorTerms matchExpressions {
            "kubernetes.io/os" In linux;
        }
    }

    hostNetwork: true;
    priorityClassName: system-node-critical;
    tolerations: operator=Exists effect=NoSchedule;
    serviceAccountName: flannel;

    initContainers install-cni "{{.Repo}}/coreos/flannel:{{.Version}}" {
        command: cp;
        args: "-f" "/etc/kube-flannel/cni-conf.json" "/etc/cni/net.d/10-flannel.conflist";
        volumeMounts {
            hostPath:cni /etc/cni/net.d;
            configMap:flannel-cfg:kube-flannel-cfg  /etc/kube-flannel/;
        }
    }

    containers kube-flannel "{{.Repo}}/coreos/flannel:{{.Version}}" {
        command: "/opt/bin/flanneld";
        args: "--ip-masq" "--kube-subnet-mgr" "--iface-regex={{ .Interface }}";
        resources {
            requests {
                cpu: "100m";
                memory: "50Mi";
            }
            limits {
                cpu: "{{.LimitCPU}}";
                memory: "{{.LimitMemory}}";
            }
        }
        securityContext {
            privileged: false;
            capabilities {
                add: "NET_ADMIN" "NET_RAW";
            }
        }
        envs {
            POD_NAME field metadata.name;
            POD_NAMESPACE field metadata.namespace;
        }
        mounts {
            hostPath:run /run/flannel;
            hostPath:flannel-cfg:kube-flannel-cfg /etc/kube-flannel/;
        }
    }
}
