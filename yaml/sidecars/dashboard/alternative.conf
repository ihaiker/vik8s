namespace kubernetes-dashboard;

ServiceAccount:v1 kubernetes-dashboard;


secret kubernetes-dashboard-csrf Opaque {
    csrf: "''";
}
secret kubernetes-dashboard-key-holder Opaque;
ConfigMap kubernetes-dashboard-settings;

Role:rbac.authorization.k8s.io/v1 kubernetes-dashboard {
    # Allow Dashboard to get update and delete Dashboard exclusive secrets.
    rules {
        apiGroups: "";
        resources: "secrets";
        resourceNames: "kubernetes-dashboard-key-holder" "kubernetes-dashboard-certs" "kubernetes-dashboard-csrf";
        verbs: "get" "update" "delete";
    }
    # Allow Dashboard to get and update 'kubernetes-dashboard-settings' config map.
    rules {
        apiGroups: "";
        resources: "configmaps";
        resourceNames: "kubernetes-dashboard-settings";
        verbs: "get" "update";
    }
    # Allow Dashboard to get metrics.
    rules {
        apiGroups: "";
        resources: "services";
        resourceNames: "heapster" "dashboard-metrics-scraper";
        verbs: "proxy";
    }
    rules {
        apiGroups: "";
        resources: "services/proxy";
        resourceNames: "heapster" "http:heapster:" "https:heapster:" "dashboard-metrics-scraper" "http:dashboard-metrics-scraper";
        verbs: "get";
    }
}

ClusterRole:rbac.authorization.k8s.io/v1 kubernetes-dashboard {
    # Allow Metrics Scraper to get metrics from the Metrics server
    rules {
        apiGroups: "metrics.k8s.io";
        resources: "pods" "nodes";
        verbs: "get" "list" "watch";
    }
}

RoleBinding:rbac.authorization.k8s.io/v1 kubernetes-dashboard {
    roleRef {
        apiGroup: rbac.authorization.k8s.io;
        kind: Role;
        name: kubernetes-dashboard;
    }
    subjects {
        kind: ServiceAccount;
        name: kubernetes-dashboard;
        namespace: kubernetes-dashboard;
    }
}

ClusterRoleBinding:rbac.authorization.k8s.io/v1 kubernetes-dashboard {
    roleRef {
        apiGroup: rbac.authorization.k8s.io;
        kind: ClusterRole;
        name: kubernetes-dashboard;
    }
    subjects {
        kind: ServiceAccount;
        name: kubernetes-dashboard;
        namespace: kubernetes-dashboard;
    }
}

deployment kubernetes-dashboard {
    replicas: 1;
    revisionHistoryLimit: 10;
    serviceAccountName: kubernetes-dashboard;
    tolerations: key=node-role.kubernetes.io/master effect=NoSchedule;
    nodeSelector {
        kubernetes.io/os: linux;
    }

    containers kubernetes-dashboard "kubernetesui/dashboard:v2.0.0" {
        port 9090/tcp;
        args: "--namespace=kubernetes-dashboard" "--enable-insecure-login";
        mount empty:tmp-volume /tmp;
        livenessProbe {
            httpGet {
                path: /;
                port: 9090;
            }
            initialDelaySeconds: 30;
            timeoutSeconds: 30;
        }
        securityContext {
            allowPrivilegeEscalation: false;
            readOnlyRootFilesystem: true;
            runAsUser: 1001;
            runAsGroup: 2001;
        }
    }
}

service deployment:kubernetes-dashboard kubernetes-dashboard "{{ if ge .ExposePort 0 }}NodePort{{ end }}" {
    ports {
        http 9090:9090/tcp "{{ if gt .ExposePort 0 }}{{ .ExposePort }}{{ end }}";
    }
}

deployment dashboard-metrics-scraper {
    replicas: 1;
    revisionHistoryLimit: 10;
    template {
        metadata {
            annotations {
                seccomp.security.alpha.kubernetes.io/pod: 'runtime/default';
            }
        }
    }
    serviceAccountName: kubernetes-dashboard;
    nodeSelector {
        kubernetes.io/os: linux;
    }
    tolerations: key=node-role.kubernetes.io/master effect=NoSchedule;

    containers dashboard-metrics-scraper "kubernetesui/metrics-scraper:v1.0.4" {
        port 8000/tcp;
        mount empty:tmp-volume /tmp;
        securityContext {
            allowPrivilegeEscalation: false;
            readOnlyRootFilesystem: true;
            runAsUser: 1001;
            runAsGroup: 2001;
        }
        livenessProbe {
            httpGet {
                scheme: HTTP;
                path: /;
                port: 8000;
            }
            initialDelaySeconds: 30;
            timeoutSeconds: 30;
        }
    }
}

service deployment:dashboard-metrics-scraper dashboard-metrics-scraper {
    port 8080:8080;
}



