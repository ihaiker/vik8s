namespace kubernetes-dashboard;

ServiceAccount:v1 kubernetes-dashboard;

secret kubernetes-dashboard-certs Opaque {
    {{ if and (not (eq .TLSKey "")) (not (eq .TLSCert "")) }}
    tls.crt: "{{.TLSCert}}";
    tls.key: "{{.TLSKey}}";
    {{ end }}
}
secret kubernetes-dashboard-csrf Opaque {
    csrf: "''";
}
secret kubernetes-dashboard-key-holder Opaque;
ConfigMap kubernetes-dashboard-settings;

Role:rbac.authorization.k8s.io/v1 kubernetes-dashboard {
    # Allow Dashboard to get update and delete Dashboard exclusive secrets.
    rules {
        apiGroups: "";
        resources: "secrets";
        resourceNames: "kubernetes-dashboard-key-holder" "kubernetes-dashboard-certs" "kubernetes-dashboard-csrf";
        verbs: "get" "update" "delete";
    }
    # Allow Dashboard to get and update 'kubernetes-dashboard-settings' config map.
    rules {
        apiGroups: "";
        resources: "configmaps";
        resourceNames: "kubernetes-dashboard-settings";
        verbs: "get" "update";
    }
    # Allow Dashboard to get metrics.
    rules {
        apiGroups: "";
        resources: "services";
        resourceNames: "heapster" "dashboard-metrics-scraper";
        verbs: "proxy";
    }
    rules {
        apiGroups: "";
        resources: "services/proxy";
        resourceNames: "heapster" "http:heapster:" "https:heapster:" "dashboard-metrics-scraper" "http:dashboard-metrics-scraper";
        verbs: "get";
    }
}

# Allow Metrics Scraper to get metrics from the Metrics server
ClusterRole:rbac.authorization.k8s.io/v1 kubernetes-dashboard {
    rules {
        apiGroups: "metrics.k8s.io";
        resources: "pods" "nodes";
        verbs: "get" "list" "watch";
    }
}

RoleBinding:rbac.authorization.k8s.io/v1 kubernetes-dashboard {
    roleRef {
        apiGroup: rbac.authorization.k8s.io;
        kind: Role;
        name: kubernetes-dashboard;
    }
    subjects {
        kind: ServiceAccount;
        name: kubernetes-dashboard;
        namespace: kubernetes-dashboard;
    }
}

ClusterRoleBinding:rbac.authorization.k8s.io/v1 kubernetes-dashboard {
    roleRef {
        apiGroup: rbac.authorization.k8s.io;
        kind: ClusterRole;
        name: kubernetes-dashboard;
    }
    subjects {
        kind: ServiceAccount;
        name: kubernetes-dashboard;
        namespace: kubernetes-dashboard;
    }
}

deployment kubernetes-dashboard {
    replicas: 1;
    revisionHistoryLimit: 10;
    serviceAccountName: kubernetes-dashboard;
    tolerations: key=node-role.kubernetes.io/master effect=NoSchedule;
    nodeSelector {
        kubernetes.io/os: linux;
    }

    containers kubernetes-dashboard "kubernetesui/dashboard:v2.0.0" {
        port 8443/tcp;
        args:
            {{ if or (eq .TLSKey "") (eq .TLSCert "") }}
                "--auto-generate-certificates"
            {{ else }}
                "--tls-cert-file=/tls.crt"
                "--tls-key-file=/tls.key"
            {{ end }}
            "--namespace=kubernetes-dashboard";

        mount empty:tmp-volume /tmp;
        mount secret:kubernetes-dashboard-certs /certs;
        livenessProbe {
            httpGet {
                scheme: HTTPS;
                path: /;
                port: 8443;
            }
            initialDelaySeconds: 30;
            timeoutSeconds: 30;
        }
        securityContext {
            allowPrivilegeEscalation: false;
            readOnlyRootFilesystem: true;
            runAsUser: 1001;
            runAsGroup: 2001;
        }
    }
}

service deployment:kubernetes-dashboard kubernetes-dashboard "{{if ge .ExposePort 0}}NodePort{{end}}" {
    port https 8443:8443/TCP "{{ if gt .ExposePort 0 }}{{ .ExposePort }}{{ end }}";
}

deployment dashboard-metrics-scraper {
    replicas: 1;
    revisionHistoryLimit: 10;
    template {
        metadata {
            annotations {
                seccomp.security.alpha.kubernetes.io/pod: 'runtime/default';
            }
        }
    }
    serviceAccountName: kubernetes-dashboard;
    nodeSelector {
        kubernetes.io/os: linux;
    }
    tolerations: key=node-role.kubernetes.io/master effect=NoSchedule;

    containers dashboard-metrics-scraper "kubernetesui/metrics-scraper:v1.0.4" {
        port 8000/tcp;
        mount empty:tmp-volume /tmp;
        securityContext {
            allowPrivilegeEscalation: false;
            readOnlyRootFilesystem: true;
            runAsUser: 1001;
            runAsGroup: 2001;
        }
        livenessProbe {
            httpGet {
                scheme: HTTP;
                path: /;
                port: 8000;
            }
            initialDelaySeconds: 30;
            timeoutSeconds: 30;
        }
    }
}

service deployment:dashboard-metrics-scraper dashboard-metrics-scraper {
    port 8080:8080;
}
