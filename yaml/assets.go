// Code generated for package yamls by go-bindata DO NOT EDIT. (@generated)
// sources:
// yaml/cni/flannel.conf
// yaml/ingress/nginx.conf
// yaml/ingress/traefik.conf
// yaml/kubeadm-config.yaml
// yaml/sidecars/dashboard/alternative.conf
// yaml/sidecars/dashboard/ingress.conf
// yaml/sidecars/dashboard/recommended.conf
// yaml/sidecars/dashboard/user.conf
// yaml/vik8s-api-server.conf
package yamls

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _yamlCniFlannelConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x5d\x8f\xda\x38\x14\x7d\xe7\x57\x58\xd9\x07\x5e\x4a\x98\x51\x35\xab\x55\x46\x3c\x50\x98\xed\x8e\x54\x28\x62\xda\xed\xc3\x6a\x55\x19\xe7\x06\xdc\x71\x6c\xd7\xbe\x61\x60\x51\xfe\xfb\xca\x4e\x80\x7c\x0d\x4b\xb7\x3c\xb4\x19\xfb\xe4\xf8\xf8\x5e\xdf\xe3\x1b\x49\x53\xb0\x9a\x32\x88\xc8\x73\xb6\x82\x81\xdd\x5b\x84\xf4\xbe\xd7\x5b\xa8\xf8\x09\x58\x66\x38\xee\x17\x4a\x70\xb6\x8f\xb4\xff\x6f\xb8\xbd\x5d\x01\xd2\x5b\xa2\xad\x0e\x13\x41\xa5\x04\x11\x66\x52\x1b\xbe\xe5\x02\xd6\x10\x93\x43\x8f\x10\x42\xa8\x94\x0a\x29\x72\x25\x6d\x39\xe2\x7e\x16\x18\x53\xa9\x0e\x6d\x49\x1d\x52\xa1\x37\x34\x74\x4b\x1b\x09\x08\x36\xe4\x6a\x48\x85\x50\x2f\x10\x2f\x8c\x4a\xb8\x80\xb9\x53\x18\x91\x20\x56\xec\x19\xcc\x30\x86\x84\x66\x02\x83\xfb\x1f\xe3\x2c\x5f\xab\x70\x5e\xa2\xa4\x5a\x53\x93\x2a\x73\xe6\x74\x7b\xbe\x4a\xa6\xc9\x24\xf2\x14\xfe\x2f\x69\xa7\xce\x6e\xce\xdc\xff\x7b\x0e\x7c\x44\x12\x2a\x2c\x14\x93\x06\x68\xfc\x51\x8a\xfd\x52\x29\xfc\x9d\x0b\x28\xf2\x7a\x82\x78\xcc\x56\x89\xcc\x8b\x66\x4a\x26\x7c\x3d\xa3\xda\xc5\xd2\x00\x12\x48\x35\xee\xa7\xdc\x90\x8d\xb2\xb8\xa0\xb8\x29\xdf\x28\xb7\xfc\x47\x39\x6a\x89\xa6\xb8\x59\x18\x48\xf8\x6e\x34\x04\x64\x43\x26\xf9\x50\x02\x86\xf1\xfd\x75\x78\x7f\xe6\xca\x53\x74\xc5\x2b\x26\x93\xc3\x13\xba\xd8\x67\x26\xc7\xf6\xb3\x05\x13\x11\x93\x09\x18\x2d\xdd\xdf\x63\xb9\x2f\xc8\x6c\xa6\xb5\x80\x14\x24\x52\xf1\xde\xa8\x4c\xdb\x02\x16\xd5\x61\x89\xf5\x93\xad\x39\x3f\xf9\x0b\x59\x1c\x43\x4c\x1e\x2c\xa3\xc2\x1f\xea\xb3\xd6\xd3\xec\x79\xb2\x96\x89\x32\x69\xe3\xff\xc2\x96\x8b\x4d\xa8\xa6\x2b\x2e\x38\x72\xb0\xd5\x80\x54\xc7\x23\xd2\x9f\x3f\x7c\xfa\x3a\x9e\xce\x1e\xe7\xfd\xe2\x79\x39\xfe\xd2\x2f\xd6\xf3\x29\x7b\x9c\xd6\x34\xb8\xb1\xc7\xc5\xa4\x35\x36\x07\x7c\x51\xe6\x39\x22\x68\xb2\xca\xf0\x42\x19\xb4\x11\x49\xb9\x1c\xdd\x90\x94\xee\x46\xbf\xde\xdd\xbd\xbd\x2b\x43\x0a\x1f\xb8\xcc\x76\xcd\x68\xe7\xbd\xde\x44\x64\x16\xc1\x2c\x95\x80\xc8\xac\x28\x0b\x69\x86\x1b\x65\xf8\x3f\x7e\x9f\xe1\xf3\x6f\xfe\x80\x1f\xed\xa3\x4c\x63\xe9\x0d\x8e\xad\xea\x13\x54\xf3\x63\xbe\xfa\xb0\x43\x90\xd6\x19\x49\xff\x5c\x4c\x06\xac\xca\x0c\xf3\xb1\xd0\x2a\x3e\x96\x94\xf7\x28\x0e\x55\xe4\x16\xcc\xca\xa1\x32\x0b\x1d\xef\x97\x65\xdb\x7f\xcd\xcd\xfa\xd5\x5a\xbb\xa0\x32\x08\x3a\xb5\x39\x69\x2d\x29\x64\x0d\xf8\x73\xb4\x52\xc5\xd0\xe6\x15\xdc\x22\x79\xa1\xc8\x36\x3f\xc7\x1e\x78\xfa\xa1\x45\x8a\x99\x0d\x5a\xcb\xe8\xea\x0a\xf5\xbc\xbf\xe3\x32\xe6\x72\xfd\xe3\xe9\x57\x02\x96\x90\x74\xa8\x74\xee\xf7\x1a\x59\x45\xda\x33\x97\x71\x44\x2a\x4a\xce\x53\xd2\x7b\x68\xcd\x63\xf2\xd2\x1c\x56\xdf\x80\x61\x35\x36\x05\xcd\x13\x98\x2d\x67\x30\x66\x4c\x65\x12\x2f\x32\x1d\x87\xbb\xae\xd0\x53\x80\xea\x7c\xd1\xf6\xf6\xcc\xd1\x9b\x9c\xac\xb7\x6a\x85\x03\x96\xac\x4b\x59\x4c\xf2\x81\xf3\xe7\xf0\x9b\x75\x66\xd1\x3f\x2d\x7b\x56\xed\x7e\x81\x53\x11\x44\x24\x60\x2b\x73\x13\xbc\xa9\xcf\x31\xc9\xff\x04\xe3\x4a\xc8\x21\x6e\xc2\xb7\xe1\x6d\x13\xa2\x45\xb6\xe6\xd2\x06\x11\xf9\xab\x4e\xec\x67\x71\xaf\x3d\x79\x29\xaf\xf1\xb2\x87\xc4\x20\x60\x4d\xd1\xc1\xda\x04\x1e\xb1\xa1\xdc\x68\x2e\x67\x2a\x76\x20\xe7\x38\x6d\x1a\x0f\xe4\x76\x5a\x78\xe6\x7b\x8a\xf0\x42\xf7\x25\xba\x05\xce\xeb\x23\xf9\x9b\x0b\xca\xb5\x32\x98\x52\xdd\xa5\x9c\x55\x9c\xf5\x75\xf5\x8e\x60\x46\xb5\xe6\x72\x6d\xaf\x13\x94\xff\xdd\xab\x4f\x94\x5e\x22\x01\xaf\xca\x68\x69\xce\x4e\xfd\xe1\x40\xc2\xc9\xe3\x74\x49\xf2\xbc\x99\xb8\x77\x94\x3d\x83\x8c\x3b\x85\x07\x9f\xca\xdd\x6f\x77\x82\xca\xa0\xd7\xad\xf5\x24\x2e\xef\xf5\xa6\x14\x52\x25\x9f\x00\xeb\xc7\x31\x3e\x16\x89\xa0\x2b\x10\xd5\x8a\x41\xee\xae\x5e\x67\x18\xb5\x46\xa7\x55\x70\xc5\x55\x96\x24\x5c\x72\xdc\x7b\x3c\x31\xf0\x3d\xe3\xe6\xd4\x30\xfa\xd0\xa8\x18\x9e\x40\x00\x43\x65\x3e\x81\x49\x2d\x49\x9d\xd9\x3c\xec\xb4\x01\x6b\x1b\xbd\xa4\xdf\x61\xbd\x7b\x52\x36\x20\x8f\x92\x08\x77\x43\xdd\x37\x36\x58\x6a\x78\xe5\xda\xd3\x86\x2b\x77\x81\x4c\x04\xb5\xb6\x68\xbb\x8a\x3a\x1e\x38\x4d\x03\x66\x38\x72\x46\xcb\xed\xa0\x12\x60\x8a\xde\x36\x22\x4a\xbb\x67\x65\x46\x0f\x3b\x6e\xd1\x12\x48\x12\x60\x38\x9a\xab\x27\xb6\x81\x38\x3b\x5a\x91\xad\x99\xc0\xbc\x6e\x25\x1e\xe1\x42\x33\x51\x12\x29\x97\x60\x2c\xe1\xd2\x22\x15\x62\xc0\x24\x77\x07\x20\x5c\x82\x56\x79\x3e\x64\xca\x80\xb2\xc7\x2e\x28\x3a\x1c\xc2\xb2\xb4\xf3\x3c\xa8\x04\x87\xa9\x34\xa5\xce\xcc\x98\xae\x24\xc6\xac\x9d\xbd\x0f\x92\x80\x04\xad\xf6\x6b\x58\x73\x9a\x23\xe2\xd4\xd0\x0d\x6f\x6f\x8e\xc8\xd0\xa1\xdc\x65\x53\xbd\x1b\x7c\x2f\x39\x73\x7b\x6b\xe6\xe8\xd8\x43\x46\x6e\x27\x5d\x5d\xe2\x59\x73\xe9\x85\x51\xc5\x06\xa3\x96\x2f\x92\xb6\xf4\x57\x72\xcd\xce\xd1\xac\xc2\x7f\x26\x9c\xc1\x50\x69\x1c\xae\xf8\xa9\x0f\x8d\x83\x76\x7c\x07\x5c\x0f\x52\x6a\xbf\x07\xee\xb9\xb8\x13\xb2\x95\x2b\xfb\x74\x6d\xfc\x18\x4f\x28\x83\x81\x81\x35\xec\x46\xae\xb6\x1f\x25\x82\x71\x63\xae\xc0\x3b\xee\xe4\x46\x44\x5d\xe5\x80\x6d\x05\xda\x0b\xd5\x59\x44\x82\xdb\x9b\x9b\x34\xb8\x6f\x4d\xa6\x90\x2a\xb3\x8f\x48\x70\x77\x33\xe3\x8d\xf9\xba\x77\x09\x9e\xf2\x0b\xfc\x87\x43\xf8\xc1\x21\x26\x8b\xcf\x35\xc1\xad\x85\x8e\xc0\x99\x1f\x68\x61\x9b\x26\x44\x8a\xcf\x39\xdf\xca\xb9\x52\x80\x1d\x36\x34\xbc\xf2\xb9\x73\x92\x57\xf1\xf2\x0e\xf5\x34\x76\x29\x3c\xf5\xce\x41\xf1\xbc\x1c\x7f\xb9\x42\x17\xc8\x6d\x93\x72\xf1\x71\xfa\x75\x3e\x9e\x3d\x90\x84\x83\x88\x49\x0a\x48\x63\x8a\x34\x74\x77\xf1\x7d\x27\xf2\x69\x31\x9e\x74\xc2\x7d\x03\xd1\x3c\xc6\x3e\x94\x17\x4b\xca\x64\x92\xd4\xbf\x8a\x3a\x61\x17\xeb\xe9\x9a\x72\xca\x7b\xff\x06\x00\x00\xff\xff\x8b\x48\xbb\xe7\x29\x10\x00\x00")

func yamlCniFlannelConfBytes() ([]byte, error) {
	return bindataRead(
		_yamlCniFlannelConf,
		"yaml/cni/flannel.conf",
	)
}

func yamlCniFlannelConf() (*asset, error) {
	bytes, err := yamlCniFlannelConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "yaml/cni/flannel.conf", size: 4137, mode: os.FileMode(420), modTime: time.Unix(1590460659, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _yamlIngressNginxConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x5f\x6f\xdb\x38\x12\x7f\xd7\xa7\x20\x74\x7d\x68\x81\x93\x63\x5f\x7b\x40\x4f\x6e\x0a\xa4\x49\xd0\x14\x68\x73\x46\x9c\xed\x6b\x41\x53\x63\x8b\x1b\x8a\x14\x38\x23\x27\xae\xa0\xef\xbe\xa0\x24\xdb\x94\x2c\xa7\xbb\x49\xb7\x58\x3f\x04\xc2\xfc\xf9\xcd\x70\x38\xfc\xcd\x44\xf3\x0c\x30\xe7\x02\x98\xd4\x2b\x0b\x88\x91\x5e\x49\xfd\x30\x0d\x02\x61\xf4\x52\xae\x32\x9e\xc7\xac\x16\x45\x8d\xa0\xb0\x9c\xa4\xd1\x53\x5f\x4f\x22\x8f\x10\xec\x5a\x0a\xc0\x8e\xa2\x48\x7c\x45\x30\x6f\x3e\xcf\x84\x30\x85\xa6\x78\x3d\x69\x91\xb7\xa1\x5b\x53\xde\xe8\xa7\x41\x50\x96\xa3\x1b\xc8\xcd\xe8\x06\x92\x42\xc0\x1c\x84\x05\xaa\xaa\x20\x38\x57\x05\x12\xd8\x1b\xa3\x20\xb6\x0b\x2e\x46\xbc\xa0\xd4\x58\xf9\xbd\xce\x6d\x74\xf7\x16\x47\xd2\x9c\xac\x27\x0b\x20\xde\x0f\x22\x1a\x5f\x6b\x14\xb0\x32\x60\x8c\x31\x5b\x28\xc0\xf6\xdb\xfd\x78\x2e\x3f\x5a\x53\xe4\x18\xb3\x30\x9c\xee\xc4\x16\xd0\x14\x56\x00\xc6\x6c\x77\x44\x64\xa0\x93\xdc\x48\x4d\xc8\xb4\x49\x00\x59\x6e\x12\x64\x58\x67\x8a\x7b\xdf\x35\xd8\x05\xc6\x4c\x49\x24\x76\xcf\x49\xa4\x8d\xaa\x7a\x62\xfc\x3a\xd4\x01\xfa\x0a\xe8\x79\xb0\xfb\xab\x3a\x44\xfe\x69\xb9\xc3\x1a\xf4\x40\x69\x84\x05\x4e\xc0\xf2\xbf\x12\x00\x1e\x08\x34\x4a\xa3\x31\x64\xa1\x06\xba\x37\xf6\x4e\xea\x55\x7b\xff\xc3\xe1\xdb\x36\xf8\x69\x87\x7c\x4a\x0e\xe1\x2e\x89\x13\x24\x4e\x05\x86\x07\xc9\x14\x79\xc2\x09\xb6\x49\x54\x41\xf0\xa4\x5e\xff\x59\x4d\xee\x37\x35\xdb\x51\xc6\x0f\x3b\xf0\x5f\xec\x02\x96\xbc\x50\x84\x8c\x0c\x0b\xdf\x81\x02\xe1\x92\x8e\x64\xf2\x3e\x7a\xb7\x7f\x90\x1c\xf1\x7d\xd8\x7a\x5c\x81\x85\x98\x85\x7b\xad\xd1\x64\x8d\x52\x60\x23\x05\x3c\x01\xfb\x3e\x7a\x57\x1f\x72\xe7\x71\x9b\x4a\x64\x29\xaf\x63\x2c\x80\xf1\x84\xe7\x04\x09\x93\x4b\xb6\x31\x05\x13\x29\xd7\x2b\x60\x20\x29\x05\xcb\x72\x6e\x79\x06\x04\xb6\xf5\xbd\x4f\x41\x33\xc5\x0b\x2d\x52\xa9\x57\x8c\x52\xe8\xb3\xc5\x2e\xfc\xe8\xd9\x65\x3c\x54\x5f\xbb\x52\xee\xfb\xe1\xf0\xb0\x0d\x1b\x1f\xb6\x87\xeb\xd5\x6e\x8b\x3c\x2d\xb9\xc1\xec\x3a\x2f\xf2\x99\x8f\x7d\xcb\x8e\x07\xe8\x7e\xaf\xb4\xed\xfd\x41\xea\x44\xea\xd5\x93\xba\x3c\xd2\x12\x79\xb4\x68\x10\xb6\x2d\x6f\x14\xdc\xc0\x72\x20\xe1\x98\x1d\x8d\xb1\x4f\xf4\x4e\xea\x24\x66\x2e\xb1\xbd\xcc\xf5\x7e\x3c\x10\xde\xaf\x12\x16\x8b\xdf\x41\x90\x5f\xa8\x06\xaa\x3b\xfe\x1e\x07\xed\x8f\x42\xdf\xb6\x7e\x7c\x71\x7f\x60\xef\x4a\xe9\x4f\xc7\xa7\x96\xd4\x1b\x92\x7f\x5b\x65\xbd\x34\x1f\xaf\x85\x97\xcc\x3f\xa9\xce\x09\xe4\xca\x6c\x32\xd0\x74\x94\x33\xda\xd4\x52\x83\x74\xdd\x8c\x86\x98\x85\x65\x39\xba\xda\x0b\xaa\xaa\x7d\x39\x04\x36\x93\xba\x2e\xd8\x47\xcb\x05\xcc\xc0\x4a\x93\xcc\x41\x18\x9d\x60\xcc\x5e\x8f\xc7\x8d\x1d\x76\x4e\x77\xfd\x27\xcf\x44\x90\xe5\xca\x0d\xd8\x7d\xb1\x32\x20\x9e\x70\xe2\x9e\xa8\xbe\x49\xad\x0d\xd5\x69\x60\x4f\xe3\x7e\xb9\x35\x19\x50\x0a\x45\xdd\x3c\xb9\xb1\x14\xb3\x70\x32\xfe\xcf\x7f\xdf\x78\x04\x30\x6c\x8c\xc2\xf2\xdc\x71\x3b\xd9\x02\x7a\xd6\x55\xd0\xfd\x6a\xfe\xba\x35\x67\x5e\x0f\x0d\x63\xbd\x5c\xca\xd2\xd6\x9c\xfe\xe2\x0e\x36\xff\x66\x2f\xd6\x5c\x15\xc0\xe2\x53\x36\xba\xf6\xec\xb1\xaa\x3a\x11\xca\xd2\x99\x57\x55\xec\xbe\x6a\x97\xaa\x9a\x7a\x90\xa0\x93\x6a\x1b\x3b\x68\x44\xfe\xee\x39\x2b\x94\x6a\xf6\x4f\x07\x5c\x1b\xb8\x6b\xe6\x52\x83\xc5\xe3\xf7\x1f\xb6\x28\x55\x75\x57\x2c\xc0\x6a\x20\xc0\x01\xbb\x93\x63\x00\x71\x59\x8e\xbe\x82\x75\xfb\x45\x55\x85\xfe\x7b\xb3\x2b\xc7\xba\x47\x1d\xc3\x9d\x65\x18\x45\x3b\x92\x3f\x7d\xf1\x72\xf6\xff\x8b\x6f\xd7\x67\x5f\x2e\xe7\xb3\xb3\xf3\xcb\x57\x27\x03\xab\x7d\xc7\xd5\x5f\xed\x1f\xc3\xf1\xed\x3a\x00\xfe\xbf\x00\x8f\x01\xf8\x76\x1d\x80\xbc\x58\x28\x89\xe9\x56\x79\xe8\xd9\x79\x9f\x1d\x57\xaf\x95\xa3\xdc\xc2\x52\x3e\x9c\xd6\x46\xa3\xd6\x65\xb4\xbf\x14\xb7\xab\xf9\xae\xa0\xf9\x42\x41\x84\xa8\xa2\x9c\x23\x52\x6a\x4d\xb1\x4a\xc3\x69\xb0\x33\x42\x10\x85\x95\xb4\x39\x37\x9a\xe0\x81\xfa\xaf\x48\x29\x73\x3f\xb3\x72\x2d\x15\xac\xe0\x12\x05\x57\x75\x22\x31\x73\xdd\xdf\x6d\x7e\xc1\x73\xbe\x90\x4a\x92\x84\xa1\x27\x97\x58\x93\xc7\xec\xec\xf3\xe7\xc3\x07\xc6\x93\x24\x66\xd7\x97\xb7\xdf\x3e\x7c\xba\xbe\xf8\x36\xbf\xbc\xf9\xfa\xe9\xfc\xf2\xd8\xcb\x62\xf5\x04\xd7\x67\xf8\x1b\x82\x8d\xd9\x64\x3c\x99\x06\x87\x56\xa0\xd7\xfd\x24\xb6\xf5\x66\x4b\x09\x2a\xd9\xf1\xc6\xc8\x71\xe4\x74\xd0\xb2\xbe\x99\x21\xf3\x9a\x52\x87\xc2\x3a\x26\xe9\xc7\x4d\x89\x72\xf6\x76\xec\x7a\x6b\x7a\xa0\x40\xf6\xe6\xcd\xeb\xae\xaa\xda\x5f\x8e\x92\x6b\xd0\x80\x38\xb3\x66\x01\x3d\xd8\x25\x97\xaa\xb0\x70\x9b\x5a\xc0\xd4\xa8\x24\x66\xaf\x0f\xe1\x3f\x02\x0d\x90\x1f\xa7\x34\x66\x27\x29\x70\x45\xe9\xf7\x01\xbe\xab\xe9\xb0\x66\xc3\x43\x25\x8a\x14\x1c\x57\x5f\xdd\xde\xce\x1e\xbb\x22\xa9\x25\x49\xae\x2e\x40\xf1\xcd\x8e\xfd\x27\xe3\xae\x4b\xde\x1d\x0e\x7d\x35\x16\x42\x00\xa2\x77\xc4\x49\xd7\x80\x64\x06\xa6\xa0\x41\x80\xca\x5b\xe4\x78\x22\x9f\x5b\xc6\xa1\x21\xf2\x2b\xea\xf8\x6b\x4a\xa4\xe4\x12\xc4\x46\xa8\x7e\x75\x72\x0b\x73\x32\xf9\xc0\xe1\xe1\x01\xc4\x80\x98\xd5\x13\x25\xcb\xb8\xdb\x60\xc2\x93\x7b\x2e\x29\xc2\xb4\xa0\xc4\xdc\xeb\x81\xd1\x5a\xfd\x60\x7c\x56\x41\xf0\x59\x66\x92\x6e\xdc\xa4\x8c\xd7\x93\xee\x16\xd3\xc6\x57\xce\xc2\x7f\x75\x99\xd4\x2c\x83\xcc\xd8\xcd\xe9\xff\xc6\x5f\x24\x13\x79\x71\x3a\x19\x8f\xb3\x7d\x7c\xda\xb8\x11\x7e\xbe\x1d\x7d\xde\x3a\xd4\xf2\x33\xdb\xaf\x45\xf1\xd1\xb1\xd8\x49\xa6\x86\x08\xcb\x52\x2e\x19\xd7\x09\x7b\xb9\x82\x66\x92\xcf\x8c\xa5\x2b\x47\x01\xe3\x57\x87\x42\x74\xd2\xaa\xda\x8a\xda\xf9\xbd\x9d\x90\x7d\x36\x69\x99\x24\x6e\xc8\xa4\x0d\xb6\xa2\x7e\x9c\xaa\x2a\xcb\x8e\xc8\x09\x1a\xe0\x69\x07\xab\x26\x9f\xb8\x25\xa0\x23\x70\x38\x80\x87\x7d\xc0\x2a\xa8\xfe\x08\x00\x00\xff\xff\xb0\xa0\x06\x10\x82\x13\x00\x00")

func yamlIngressNginxConfBytes() ([]byte, error) {
	return bindataRead(
		_yamlIngressNginxConf,
		"yaml/ingress/nginx.conf",
	)
}

func yamlIngressNginxConf() (*asset, error) {
	bytes, err := yamlIngressNginxConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "yaml/ingress/nginx.conf", size: 4994, mode: os.FileMode(420), modTime: time.Unix(1590460659, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _yamlIngressTraefikConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xdf\x6f\xdb\xb6\x13\x7f\xd7\x5f\x71\x50\x0b\xf4\x5b\xa0\x52\x5c\xd4\x28\x0c\x1a\x79\xc8\xb7\x0f\x6d\x81\x22\x33\xec\x6e\x7b\xa6\xa5\xb3\xcd\x59\x21\x35\x1e\xe9\xcc\x13\xf8\xbf\x0f\xa4\x68\xfd\xb0\x9d\x34\xc3\x86\xe5\x21\x91\x4e\x77\x9f\x3b\x7e\xee\x73\xc7\x48\xfe\x80\x54\xf3\x02\x41\xc8\xad\x46\xa2\xcc\x68\x8e\x1b\xb1\x9f\x27\x49\xd3\xe4\x4b\xac\x55\xbe\xc4\xd2\x16\xb8\xc2\x42\xa3\x71\x2e\x49\x3e\x55\x96\x0c\xea\xa5\xaa\x90\xe9\x35\x2f\x72\x6e\xcd\x4e\x69\xf1\x27\x37\x42\xc9\x7c\x3f\xa3\x5c\xa8\x9b\xc3\xfb\x35\x1a\xfe\x1e\x22\x5e\x76\xc2\x2f\x94\x34\x5a\x55\x15\x6a\x68\x12\x00\x00\x6d\x2b\xa4\xf8\xec\x7f\x78\x2d\x3e\x6b\x65\x6b\x62\x90\xa6\xf3\xce\xac\x91\x94\xd5\x05\x12\x03\x42\x7d\x10\x05\x12\xa0\x2c\x6b\x25\xa4\x21\xa0\x50\x1d\xf5\xee\x07\xd4\x6b\x62\xb0\x45\x03\x95\x20\x03\x8f\xdc\x14\xbb\xf6\xb3\xfb\x51\x5a\xfc\xc3\xa0\x24\xa1\x24\x5d\x4d\x1f\x4f\x82\xff\x4d\xb6\xb4\x4b\x77\x43\x86\x1b\x4b\xe9\x45\x5a\x5b\x97\xdc\xe0\x29\xdd\xb8\x43\xff\x17\xb2\x14\x72\xfb\xaf\x34\x4a\x55\xb8\xc4\xcd\x95\x53\x30\x78\x12\xbe\x2f\x76\x2f\x64\xc9\x60\x50\x5a\xff\xc9\xab\x90\x3d\x53\xc0\x90\x49\xb2\xeb\xdf\xb0\x30\x43\x32\x5b\xe4\x55\xab\x8a\xbb\xa2\x50\x56\x9a\xbf\x0b\x7e\xf2\x0c\xc3\xc0\x2e\xa7\xa1\xe3\x76\x9c\x86\x1d\x9e\x23\x6e\x9e\x24\x25\xd6\x95\x3a\x3e\xa0\x34\x2f\x20\x18\xeb\x4a\x14\xdc\x37\xbd\x9d\xbd\xf0\xe6\x5c\xec\xf8\x4e\x91\xb9\x47\xf3\xa8\xf4\xbe\xf5\xf8\xd2\x1b\x3a\x27\xa9\x4a\x5c\x61\x85\x85\x51\xba\xa7\xa8\x69\x40\x73\xb9\x45\x78\xbd\xc7\xe3\x3b\x78\x7d\xe0\x95\x45\x60\xb7\x90\xdf\x0f\xfc\x09\x9c\xeb\xc8\x68\xa3\xbc\x3f\x38\xc7\xc2\x73\x1b\xe5\xdc\x7c\x00\x8b\xb2\x3c\x45\xc5\xfe\x8c\xf8\xb9\x7f\x11\xf9\x06\xf5\x83\x90\x41\x36\x9f\x35\x2f\x70\x81\x5a\xa8\x72\x85\x85\x92\x25\x31\xf8\x38\x69\xdd\x5e\x8d\x37\xd2\xc2\x56\x55\xbb\x95\x28\x56\xe0\x71\xb9\x90\xa8\xe9\x22\x65\xb5\x3e\x91\xaa\x9c\x8b\x1f\x59\xd3\xe4\xbf\xa0\xf6\xb3\xe7\x5c\x3a\xd4\xb5\xde\xfa\x26\x64\x19\xaf\x45\xea\xff\xee\xed\x1a\xb5\x44\x83\x14\x5e\x2b\xb5\xfd\x86\x07\xac\x6e\x7f\xbd\x5b\xde\xa7\x5d\x58\x9a\x65\x28\x8d\x3e\xb6\x3b\xe9\x36\x9c\x7d\x67\x4c\x4d\x70\x57\x96\xbe\x0a\xc6\xa6\xd3\x0f\xf0\xfd\xdb\xea\xc7\x31\x7d\xc8\x6c\x32\xf2\x16\x92\xb0\xb0\x1a\x69\x2f\xea\x03\x6a\xb1\x39\x0e\x16\xc2\xab\x2c\x2b\x71\xc3\x6d\x65\x86\xa0\x1e\xef\x5d\x28\xa4\x73\xac\x95\x1e\x8d\x50\xd0\x97\x4f\x3b\x9b\xcc\x2f\x8c\x04\xd3\xe9\x87\xb1\x99\x97\x0f\x42\xc2\x6c\x32\x74\x77\xfd\x90\x44\x11\x40\xaf\x7e\xf6\x8c\xfa\xcf\x3f\xc5\xe8\x00\x97\x36\x8d\xd8\x80\xd2\xf0\xbf\x2d\xb6\x6a\x5d\x28\x6d\xbe\xf8\x52\x27\x6f\x2f\x8d\x04\x93\xb7\xce\x9d\x2c\x4d\x83\xb2\xec\x5b\x7b\x7e\xe8\x78\x60\x36\x9b\xc4\x34\x5b\x73\x9e\xc2\xb9\xa6\x19\x99\xbc\xa1\x05\x9d\x27\x17\x1c\x85\xf6\x5e\x87\xa2\x2b\x58\x74\x0e\x16\xb8\x4b\x42\x7c\xfe\xb5\x25\xe3\xe7\xaf\xce\x45\xcb\x9d\x35\xbb\xf0\xda\x5e\x76\xe7\x3b\x2a\x7b\xc4\xb5\x15\x99\x5f\xc2\xf0\x53\xcd\x7f\xb7\x18\x8f\xea\x2d\x0c\xde\x34\x0d\xac\x39\xe1\xc7\x69\x44\x22\xd4\x90\xb2\xb4\x7d\x5b\x70\xa2\x47\xa5\xfd\x2c\xbf\x99\x27\x3e\x63\xa8\xeb\x9f\x76\xd2\x8a\x27\xa8\x0f\xfa\xb1\x22\x28\x88\xf9\x5f\x37\xdf\x3f\x2d\x06\x24\x44\x00\x18\x9c\xad\x07\xe3\x52\x2a\x13\xb6\xc5\xe8\x16\xe8\x66\xd4\xdf\x6a\x11\x20\x2f\x2a\x4e\xd4\x6d\xa0\xbe\x67\x67\x94\x9e\xcc\xd1\x2f\x3f\x85\x8f\x41\x3d\x93\x99\x39\xd6\xc8\x20\x5d\x73\x12\xc5\x40\x04\x2f\x88\x6c\xfb\xd6\x5f\xe9\x57\x3a\x97\x0e\x2b\x6c\x5b\x00\x67\xff\x44\xa4\x4d\x33\x50\x07\x8c\x37\x57\x90\x74\xcd\xcd\xee\x7c\xb8\x63\x1f\xaf\xef\x63\x2b\xe6\xd7\x9c\xbd\x4e\xd9\x93\x43\xde\x49\xe4\xaf\x00\x00\x00\xff\xff\x2d\x57\xcf\x23\x44\x0a\x00\x00")

func yamlIngressTraefikConfBytes() ([]byte, error) {
	return bindataRead(
		_yamlIngressTraefikConf,
		"yaml/ingress/traefik.conf",
	)
}

func yamlIngressTraefikConf() (*asset, error) {
	bytes, err := yamlIngressTraefikConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "yaml/ingress/traefik.conf", size: 2628, mode: os.FileMode(420), modTime: time.Unix(1590460659, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _yamlKubeadmConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x55\x4d\x6f\x1a\x3b\x14\xdd\xfb\x57\x5c\x4d\x36\xef\x2d\x18\x42\x12\xbd\xbc\x5a\xea\x02\x41\xa2\xa2\x36\x29\x0a\x51\xf6\x8e\x7d\x19\x2c\x3c\xf6\xc8\xbe\x43\x19\x8d\xe6\xbf\x57\x1e\x86\xcf\xd2\xb4\x6a\xbb\x2a\x1b\xf0\xf1\xfd\x38\xe7\xea\xfa\x20\x0a\xfd\x82\x3e\x68\x67\x39\x2c\xcb\x57\x14\x2a\x4f\x97\xff\x87\x54\xbb\xfe\x6a\xf0\x8a\x24\xae\xd8\x52\x5b\xc5\x61\x64\xca\x40\xe8\x47\xce\xce\x75\x56\x7a\x41\xda\x59\x16\x33\xbc\x45\xc2\xb0\x2b\x52\xd7\xe9\xc7\xae\x4e\x87\x35\x0d\x93\xce\x92\x77\x66\x6a\x84\xc5\x3b\xab\x0a\xa7\x2d\x71\x48\x0e\x62\x87\x85\x9e\xa1\x5f\xa1\x6f\x1a\xfe\xdf\xcd\xcd\x75\xc2\x74\x2e\x32\x7c\xc2\xc2\x05\x4d\xce\x57\x47\x95\x23\xdc\x34\xcc\x22\x7d\x71\x7e\xa9\x6d\xc6\x19\x80\xb2\x61\xec\x72\xa1\x2d\x07\xb9\x21\x9b\x1a\x27\x85\x61\x00\x85\x53\xb3\xf2\xd5\x22\x1d\x55\x99\x3a\x35\x9a\x8c\x9f\x9a\x86\x01\x04\xf4\x2b\x2d\xf1\x4c\xd4\x6c\x25\xbb\x28\xb1\xe5\x18\xbb\x49\xf4\x34\x1b\x3e\x86\xf8\x1b\xa0\x07\x83\xab\xdb\xf4\x32\xbd\x4c\x07\xdd\xf9\xbc\xb6\x37\x2e\x5f\x26\xd3\xa6\xa9\x6b\xf0\xc2\x66\x08\xe9\x83\x88\x0a\x02\x1c\xe6\x7c\x70\x81\xac\xc8\xf1\x14\x6b\xf3\xd0\xaa\x4d\x30\xae\xc9\x8b\xa1\xcf\x3a\x6a\x73\x14\x54\x7a\xec\x65\x82\x30\x70\x78\x7e\xfe\x34\x9c\x13\xfa\x7b\x6d\x75\x58\xa0\x7a\x4f\xbe\xc4\x6d\xd6\x8b\x33\x65\x8e\x3b\x4d\xb1\x17\x87\x76\x88\xa4\x73\x6c\x51\x80\x85\x0b\x34\x15\xb4\xe0\xd0\x47\x92\xfd\xd3\xeb\xdc\x95\xf6\xad\x7b\x8f\x42\x7d\xb6\xa6\xe2\xd0\x75\x8e\x9f\x42\xd0\xe2\xb9\x2a\x90\xc3\xbd\x36\xb8\xdd\x17\x83\xfe\x41\x58\x91\x6d\x26\xfe\xe7\x74\xfd\xa6\x82\xf3\x63\xf9\x19\x5d\x41\x2e\x50\x95\xe6\xaf\xd1\xc3\x94\x6d\x49\x50\x0b\x8d\x9c\xc7\xf1\xe3\x8c\xb1\xba\x06\x3d\x87\xf4\x8e\xa4\x4a\xef\xd6\x84\xde\x0a\x13\x77\x13\x49\xaa\x4e\x79\x8b\x6d\xf8\x63\x67\x08\x21\x3e\xbb\xed\xfa\xb7\xb9\x8f\x4e\xe1\xee\x05\xb4\x42\x89\x8a\xc0\xfb\xfd\xba\x4e\x9b\x86\x5f\x5d\xdf\xbe\x3b\x5c\x7c\x00\x29\x22\x2d\x0e\x49\xab\x73\xef\x4e\xfd\x62\xa9\x23\xa4\xfa\x52\xa4\xd2\x53\xb2\x89\x46\x4f\x3f\x8a\x17\x85\x0e\xed\xf3\xec\xc5\x63\x4f\x1a\x8d\x96\xf6\x25\x96\x58\xfd\x5a\x85\x25\x56\x09\xdb\x93\x67\xbd\x5e\x8f\x9d\x7a\x71\xe1\xdd\xba\x4a\x65\xeb\xb8\x7b\x53\x16\xa6\x58\x88\x41\xe7\xca\xd1\x45\xa6\x31\xec\xd8\x97\x73\xa7\x22\x27\x5d\xac\x42\xc2\x2e\xe2\x17\x67\x17\x71\xee\xd2\x94\x0a\xa3\x9d\x6d\x80\x38\xd3\xe4\x00\x4d\xce\xf2\xf8\xee\x7f\xc2\xc4\x6a\x3a\x6e\xdc\x2e\xd1\x70\x3a\xd9\x99\x3c\x03\x10\x6a\x85\x9e\x74\xc0\xa1\x52\x1e\x43\x68\x8d\xff\x1f\x6d\x15\xae\xf7\x36\x77\xf9\x6f\xeb\x64\xd0\x34\xc9\xf9\x61\x18\xa4\x6f\x46\x11\xb9\x1c\x4e\xc2\xe0\x09\x1d\x99\x79\x57\x16\x63\xaf\xa3\x69\x43\xa8\x02\x61\xae\xd8\xd7\x00\x00\x00\xff\xff\x99\x56\xd6\xe7\xf4\x06\x00\x00")

func yamlKubeadmConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_yamlKubeadmConfigYaml,
		"yaml/kubeadm-config.yaml",
	)
}

func yamlKubeadmConfigYaml() (*asset, error) {
	bytes, err := yamlKubeadmConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "yaml/kubeadm-config.yaml", size: 1780, mode: os.FileMode(420), modTime: time.Unix(1590460659, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _yamlSidecarsDashboardAlternativeConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4d\x73\xdb\x36\x13\xbe\xf3\x57\xec\xf0\x3d\xe8\x24\x8a\xce\xdb\x43\x02\x8d\x0f\xae\x93\x26\x87\xc6\xf1\xd8\xe9\x0f\x80\xc0\x95\x88\x1a\x04\x50\x60\xa9\x58\xd5\xe8\xbf\x77\xc0\x0f\x89\x94\x49\xc9\x76\x32\x9d\x86\x07\x69\xb8\x0b\xec\xc7\xb3\x0f\x1e\x50\xf3\x02\xbd\xe5\x02\xe1\xa1\x5c\xa0\xd3\x48\xe8\xa7\x19\xf7\xf9\xc2\x70\x97\xcd\xa3\xe8\x1e\xdd\x5a\x0a\xbc\x12\xc2\x94\x9a\xd8\xfa\x62\x6c\x61\xe4\x51\x38\xa4\x41\xf7\x54\x78\xb7\x84\x2f\x96\xff\x55\x22\x6c\x23\x00\x80\x60\x61\x10\x4f\x26\xf1\x3c\xda\x9d\xdc\xfb\x80\x9b\x69\x6e\x54\x86\xae\x89\x30\x8f\xae\x8d\x5e\xca\xd5\x67\x6e\x87\x77\x78\x24\x92\x7a\xe5\xe7\x51\x74\x67\x14\x32\xb7\xe0\x22\xe1\x25\xe5\xc6\xc9\xbf\x39\x49\xa3\x93\x87\xb7\x3e\x91\x66\x36\xd2\x4e\x53\xe3\xff\xe0\x4a\x29\xf3\x0d\xde\xef\xed\x64\x60\x85\x04\xa5\xcd\x38\x21\x70\x9d\x41\x86\x0a\x09\x3b\x4b\xf0\x51\xa8\xd2\xcb\x35\x42\xdd\x94\x4f\xaa\x58\xae\x54\xe8\x9b\xb8\xe1\xe1\x56\x7e\x74\xa6\xb4\x9e\x41\x1c\xcf\xf7\x66\x87\xde\x94\x4e\x60\x30\x37\xfb\x07\xbc\x37\x61\x6a\x0c\xe2\x33\x78\xc5\x23\x2b\x04\x3a\xf2\xa3\x4e\xef\x96\x9d\x94\x6b\x74\x8b\x90\x6a\x85\x14\x43\x5c\x37\x1e\x43\x5c\xb7\xdd\xac\xdb\x9d\x46\x2b\xc0\xd4\x20\x36\x39\x39\xaf\x09\x88\x6a\xb0\x50\x70\xfb\x6a\xd4\xea\x10\x05\xb7\x2f\x06\xae\x2d\xe3\x5c\xf7\xcf\x6a\xba\x40\x72\x52\x7c\xcf\xf0\xab\x73\x77\xaa\x89\x1c\xb9\xf5\x54\x8d\xf9\xd0\x44\x93\x77\xea\x85\xe3\x16\xdd\x40\x2f\xd6\x99\xc7\x4d\xaf\x89\xef\x28\x6f\xd6\x8d\x76\xa6\xc8\x9c\xc8\xb2\xf6\x9d\x35\x06\xdf\xb3\x8c\xf7\xd1\x6c\x7f\x49\xa3\x61\x68\x6d\x9b\xbb\x28\xba\x56\x65\x48\xf3\x43\x14\xe1\x73\x9d\x1c\xee\xeb\xe4\x47\x43\x87\xa5\x33\x05\x50\x8e\xfb\x75\x01\x2e\x74\x67\xc1\x6e\x49\x53\xd7\x32\x02\xbd\x35\x59\x38\xbc\xda\x64\x38\x4e\x55\x25\x7d\xf8\xfb\xc6\x49\xe4\x5d\x10\x42\xf7\xbf\x4a\x9d\x49\xbd\x7a\x35\x08\xce\x28\xbc\xc3\xe5\x40\x0f\x0c\x46\x63\x1e\x0a\x7d\x90\x3a\x63\x10\x0a\x39\xd8\xc2\x35\xc4\x46\x6e\x96\x03\x4f\x7d\xb9\xf8\x13\x05\x75\xd1\xab\x83\xf5\x2f\xa9\xe7\x87\x6d\xd7\x54\x37\xe0\xe9\xfc\x7d\x02\xfd\x27\x20\xec\xd4\xf3\x93\x21\x99\xa1\x55\x66\x53\xa0\x1e\xbe\xf2\x5b\x90\xd0\x2a\x29\xb8\x67\x70\x31\x6f\x0c\x6b\xe9\xa5\xd1\x9f\xa4\x27\xe3\x36\xbf\xcb\x42\x12\x83\x8b\xb4\xf6\xfa\x5e\xe9\x37\x67\x0a\x26\xa3\xd0\x55\xe8\x7a\x06\x0f\xb8\xb9\x0c\xe7\x69\x1a\xe6\x92\x1c\x36\x85\x41\x16\x3c\x80\x0c\xb8\x5c\xa2\xa0\xcb\x1b\x73\x2f\x72\xcc\xca\x16\xf2\xb0\xeb\x1e\x15\x0a\x32\xae\x0b\x66\x2f\x84\xf1\x0c\x94\xd4\xe5\x63\x0b\x41\xfd\x05\x64\x34\x71\xa9\xd1\xf9\x61\x10\x3a\x97\x54\x29\x67\x7b\x3b\x5b\xbf\x49\xd2\x24\x8d\x3b\xd9\xac\x71\x04\xef\xd2\x77\xe9\x8c\x84\x3d\xcc\x83\xbb\x55\x10\x84\xe9\x74\x3f\x98\xcb\xa1\x44\x71\x58\x82\x9a\x2f\x14\x4e\xa5\xf6\x28\x4a\x87\x53\x65\x56\x52\x77\xd4\xa5\x08\x98\x02\x16\x96\x36\x8c\x0a\x3b\x5d\x1b\x55\x16\x08\x33\x2a\x3a\x09\x95\x5c\xa3\x46\xef\x6f\x9d\x59\x60\xa7\xbe\xf0\x04\xf5\xfe\x88\x74\x64\xad\xaa\xe7\x94\x33\x98\xcd\x9f\x3a\x8c\x23\x56\xf5\xd5\xf7\xed\x7a\x6f\x52\x4b\x92\x5c\xbd\x47\xc5\x37\xf7\x28\x8c\xce\x3c\x83\xff\x1f\x6d\x21\x59\xa0\x29\x69\xd0\x7f\x08\x57\xf5\x2e\x69\x73\x6d\x34\xe1\xe3\x71\xad\x3c\x28\xff\xad\x93\x6b\xa9\x70\x85\x1f\xbc\xe0\xaa\xe2\x0f\x83\x25\x57\x1e\xfb\x09\x1d\xf2\xec\x8b\x56\x9b\x3b\x63\xe8\x37\xa9\xd0\x6f\x3c\x61\xc1\x80\x5c\x79\xbc\xb2\xd4\x57\xfe\x0f\x8f\x2e\x30\x39\xbd\x18\x70\x36\xba\xf0\xa6\xe7\xdd\x1d\x4e\x53\x43\x7c\x38\x9c\x2a\x36\x48\xa8\x61\x96\x6d\xb7\x20\x97\xb0\x42\x48\x3e\x3c\x5a\xe3\xf1\x36\x90\x29\x85\xdd\xee\xc6\x64\xd5\xcb\x76\x0b\xa8\x33\xd8\xed\x5a\xca\x85\xb9\x74\x95\x23\x8c\xb6\x1a\x13\x6b\x39\xb8\x8f\x4a\x4f\xa2\x6e\xb7\x3d\x53\x65\x68\xc2\x0f\x0b\xc4\xe8\x8d\xff\x3a\x95\x20\x2c\xac\x0a\x9f\xa2\x87\xfa\x0b\x24\x9e\x71\xe2\xc7\xf3\xd6\xda\x50\xad\x10\x03\xac\xf5\x28\x84\x29\x6c\xd2\x72\x26\xe1\xca\xe6\xfc\x48\x3b\xac\xc9\x18\x4c\x5c\xa9\x03\xff\x66\x19\x2e\x79\xa9\x68\x32\xc6\xe6\x5d\x57\xa0\x5f\x24\x66\xaf\x53\x21\xf8\x31\x32\x78\x2c\x66\xe3\x03\xeb\x2b\xda\x91\x97\xad\x2f\x92\x34\xf9\xe5\x89\xae\xbd\x4d\xd3\x23\x5d\x7b\x96\x16\xfd\x7c\x67\x19\x5e\xad\xa0\x5e\xe4\x18\x08\xf2\xe9\xeb\xd7\xdb\x01\x19\x3d\xad\xaf\x01\xdf\x7f\x41\x5f\xc7\x94\x6a\x9c\x2d\xe7\x0e\x7e\xc3\x8e\xb7\x29\x0b\x3f\xf3\x10\x3f\x8a\xfe\x09\x00\x00\xff\xff\x7b\xf0\xa0\x44\xd0\x10\x00\x00")

func yamlSidecarsDashboardAlternativeConfBytes() ([]byte, error) {
	return bindataRead(
		_yamlSidecarsDashboardAlternativeConf,
		"yaml/sidecars/dashboard/alternative.conf",
	)
}

func yamlSidecarsDashboardAlternativeConf() (*asset, error) {
	bytes, err := yamlSidecarsDashboardAlternativeConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "yaml/sidecars/dashboard/alternative.conf", size: 4304, mode: os.FileMode(420), modTime: time.Unix(1590460659, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _yamlSidecarsDashboardIngressConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\xcd\x6e\x9b\x40\x10\xc7\xef\x3c\xc5\x88\x4b\x4e\x90\x48\xcd\xa1\xc1\xa7\xb6\xaa\xd4\xa8\x51\x55\xa9\xbd\x47\xeb\x65\xb0\x57\x26\xb3\x74\x66\x48\xe3\xa2\x7d\xf7\x6a\x31\x60\xac\xd8\x0d\xe5\xc6\xce\xce\xfc\xe6\x6b\xff\x64\x9e\x50\x1a\x63\x11\x76\xed\x1a\x99\x50\x51\xb2\xd2\xc8\x76\xed\x0d\x97\xab\x24\xe9\x3a\x70\x15\x90\x57\xc8\x3f\x93\x59\xd7\x78\x4f\x82\xb6\x65\x7c\xf0\x1b\x47\x10\x42\x22\x68\x19\xf5\xac\x7f\xa6\xb5\x40\x7a\xb4\xe4\xce\x5f\x6b\x2d\x29\x74\x09\x00\x80\xd6\x92\x5b\xd6\x02\xd2\xae\xcb\x7f\x3e\xfc\xf8\x84\xac\x21\xa4\xab\xc9\xb8\xc3\xfd\x64\xfc\x8a\xfb\xde\x16\x62\x4a\x48\x65\x44\x27\x8e\x36\x8c\x22\x70\x24\x8e\x27\x07\x82\x21\xf2\x6a\xd4\x79\x1a\x4f\xe2\x47\x1b\x47\x2f\xf9\x70\x33\x3f\x4d\x6f\x3c\xb5\xb5\x11\x29\x0e\x57\x57\xc9\xe4\xfa\x76\x3b\x96\x40\x1a\xf6\x2f\xfb\x4c\xa4\xce\x1a\xf6\xea\xad\xaf\xa5\x80\x74\xab\xda\xc8\x50\xfd\xf2\x08\xcf\xc8\xae\x8a\x6d\xaa\x4c\x2d\xb8\xd0\x7d\x6d\xec\x0e\xa9\x9c\xf0\xff\x49\x8f\x5c\xc6\xd2\x31\xda\x38\x3d\xe5\x76\x29\x98\xf1\x37\x3b\xc5\x4c\x0d\x6f\x50\x0b\xb8\x5e\x08\xec\x7b\x9c\x0d\x69\xcb\x91\x39\x79\x5f\x6c\xd3\xa5\xfa\x94\x0d\x56\x6e\x77\x31\xcf\x43\x75\x19\x92\xf2\x3e\x6b\xbc\x23\x2d\xa0\x8f\xb1\x34\x44\xc5\x9e\x34\x36\x79\x16\x42\x5e\xc5\x98\x2d\xf3\xe9\x8e\xe5\xe3\x66\x7d\x41\x53\x22\xcf\x57\xeb\x3c\xcf\xb6\xa2\xfe\x29\x63\xfc\xd5\xa2\x68\xb6\xed\xdd\x62\xab\x3e\xb4\xba\xf5\xec\xfe\xf4\xef\xa0\x80\x8f\x68\x18\x19\xe2\xab\xf2\x3b\xa4\xe9\xc1\xbd\x35\x03\xeb\xa9\x72\x9b\x96\xfb\x30\x99\x90\x6b\x9a\x38\xc1\xab\x7e\x15\x1f\x05\xf5\xf1\x80\x84\x13\x1e\xa4\xaf\x79\x57\xe7\xca\x8f\x7f\x61\x89\xde\x0c\xe2\x70\x51\x70\x56\x49\xd7\x21\x95\x63\x47\xb9\xad\x51\x7a\x11\xb9\x3f\x94\x15\x42\x3a\xd3\x82\x38\x0e\x68\x8c\x6e\xe7\x02\x11\x3f\x41\x7e\x76\x16\xbf\x99\x27\x2c\x2e\x88\xe3\x99\xeb\xdf\xfd\xa0\x67\xff\x28\x22\x84\xf7\xb7\xb7\xef\xba\x0e\x6b\xc1\x10\xee\x6e\xee\x6e\x86\x84\x67\x83\x18\xfb\x11\xfe\x06\x00\x00\xff\xff\x86\x78\x8e\x0b\xa1\x05\x00\x00")

func yamlSidecarsDashboardIngressConfBytes() ([]byte, error) {
	return bindataRead(
		_yamlSidecarsDashboardIngressConf,
		"yaml/sidecars/dashboard/ingress.conf",
	)
}

func yamlSidecarsDashboardIngressConf() (*asset, error) {
	bytes, err := yamlSidecarsDashboardIngressConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "yaml/sidecars/dashboard/ingress.conf", size: 1441, mode: os.FileMode(420), modTime: time.Unix(1590460659, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _yamlSidecarsDashboardRecommendedConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\xcd\x6e\xdb\xb8\x13\xbf\xfb\x29\x06\xfa\x1f\xd2\x1e\x2c\x2b\x6d\x0f\x05\x8d\x1c\xfa\x4f\xbb\x2d\xd0\x36\x0d\xea\xec\x03\x30\xd4\xc8\xe6\x9a\x22\x55\x72\xe4\x46\x2b\xe8\xdd\x17\xd4\x87\x2d\x39\x92\xd3\xa4\xc5\x62\xcb\x43\x1c\xcf\x17\x67\x7e\xf3\xc1\xb1\xe6\x29\xba\x8c\x0b\x84\x6d\x7e\x8b\x56\x23\xa1\x9b\xc7\xdc\x6d\x6e\x0d\xb7\xf1\x72\x36\x5b\xa1\xdd\x49\x81\x6f\x84\x30\xb9\x26\xb6\x3b\x9f\x12\x74\x28\x2c\xd2\x28\x77\x2e\xd0\x92\x83\x2f\x19\xff\x96\x23\x94\x33\x00\x80\xb2\x04\x99\x00\xd7\x31\x3c\xd3\x86\xe0\x19\x7e\x83\xf0\xe6\xd3\xea\x23\x16\x10\x04\xcf\x9f\x0f\xa9\x97\x68\xa9\x21\x57\x55\xad\x4d\xca\x85\xc2\x12\x83\xa0\x2c\x3b\x81\xaa\x0a\x96\x7b\xe6\x16\x8b\x3d\xf3\x23\x16\x7b\x5e\x59\x02\xea\xd8\x9b\xa9\x4e\x7b\xec\x6c\x32\x74\xd8\x53\x18\x04\x67\x67\xc1\xf2\x01\xdd\x2d\x16\xf3\x8d\x51\x31\xda\xd6\xc2\x72\x76\x69\x74\x22\xd7\x9f\x79\x36\xae\xe1\x90\x48\xea\xb5\x5b\xce\x66\x5f\x8d\x42\x66\x6f\xb9\x08\x79\x4e\x1b\x63\xe5\xdf\x9c\xa4\xd1\xe1\xf6\xb5\x0b\xa5\x59\x4c\xe0\xdf\xfa\xf8\x3f\x78\xa3\x94\xf9\x0e\x6f\xf7\x74\x32\xb0\x46\x82\x3c\x8b\x39\x61\x0d\x77\x8c\x0a\x09\x7b\x22\x78\x27\x54\xee\xe4\x0e\xa1\x09\xca\x85\xb5\x2d\x9b\x2b\x74\xad\x5d\x7f\x78\x26\xdf\x5b\x93\x67\x8e\x41\xd0\x82\x59\x8b\xa1\x33\xb9\x15\xe8\xc9\xad\xfe\x08\xf7\xca\x97\x19\x83\xe0\x01\xbc\x82\x09\x89\xba\x7e\x26\x99\xce\x26\xbd\x2b\x77\x68\x6f\xfd\x55\x6b\xa4\x00\x82\x26\xf0\x00\x82\x26\xec\x56\xae\x3a\x8d\x96\x87\xa9\x45\xec\xec\x64\xbe\xce\x40\xd4\x89\x85\x94\x67\x4f\x46\xad\x31\x91\xf2\xec\xd1\xc0\x75\x6e\x3c\x14\xfd\x0f\x05\x9d\x22\x59\x29\x7e\x26\xf9\xf5\xa0\x38\x15\xc4\x06\x79\xe6\xa8\x4e\xf3\x21\x88\xf6\xde\xb9\x13\x96\x67\x68\x47\x62\xc9\xac\xb9\x2b\x06\x41\xfc\x84\x7b\x8b\xbe\xb5\x07\x9c\xdc\x10\x65\xac\xfb\xce\x5a\x82\x1b\x50\xa6\xe3\x68\xd5\x1f\x13\xa8\x4f\x5a\x17\x66\x35\x9b\x75\xa9\xfa\xdc\x28\xc2\xaa\x51\x3c\x4a\x18\x24\xd6\xa4\x40\x1b\xdc\xcb\xf9\x50\xd1\xce\x2e\x55\xee\xbd\xfc\xa9\x81\x72\x0a\xe8\xae\x60\x1a\x43\x13\xb0\x67\x26\xf6\x8d\xab\x4d\x8c\xd3\x65\xaa\xa4\xf3\x1f\xdf\x39\x89\x4d\x1f\x00\xef\xfa\xff\xa5\x8e\xa5\x5e\x3f\x3d\x02\xa3\xf0\x2b\x26\x23\x31\x30\x98\xb4\x79\x70\x74\x2b\x75\xcc\xc0\x3b\x72\xa0\xf9\x37\x93\x4d\x3c\x83\x87\x1a\x75\xf9\xed\x5f\x28\xa8\x8f\x5e\x63\x6c\xf8\xa2\xfe\xb8\xd9\x4e\xa6\x7e\xae\x4f\xdf\x5f\xcd\xfa\xd9\xff\x4f\x40\xd8\xf3\xe7\x37\x43\x32\xc6\x4c\x99\x22\x45\x3d\xfe\xdc\x77\x20\x61\xa6\xa4\xe0\x8e\xc1\xf9\xb2\x25\xec\xa4\x93\x46\x7f\x90\x8e\x8c\x2d\x3e\xc9\x54\x12\x83\xf3\xa8\xe1\xba\x81\xeb\x57\x0f\x38\x4c\x46\xa1\xad\xd1\x75\x0c\xb6\x58\x5c\xf8\x7e\x9a\xfb\xbc\x84\x07\x25\x9f\xc8\x94\x7b\x90\x01\x93\x04\x05\x5d\x5c\x99\x95\xd8\x60\x9c\x77\x90\x7b\xad\x15\x2a\x14\x64\x6c\x1f\xcc\x81\x09\xe3\x18\x28\xa9\xf3\xbb\x0e\x82\x66\xfb\x31\x9a\xb8\xd4\x68\xdd\x38\x08\xbd\x07\x2a\x97\x8b\x3d\x9d\xed\x5e\x84\x51\x18\x05\xbd\xdb\x32\x63\x09\x5e\xbf\x7a\xf5\x72\x41\x22\x3b\xe4\x83\xdb\xb5\x63\xfb\x6f\xb0\xdf\x10\x8d\x3d\xde\x0d\xef\x6d\x85\xdd\x52\xd8\x3f\xc1\x7c\xce\x73\x32\xf3\x35\x6a\x8f\x1c\xd6\x2b\x84\x4c\xa4\xe0\x84\x2e\x38\xbe\x07\x95\xc3\x09\x2b\xa4\x5c\xad\x3b\x4f\xa4\xc2\x8b\x45\xbb\x78\x06\x53\xa2\x7e\x97\x39\x48\x6e\xb1\xb8\x7f\x57\xb3\x7e\x1e\xe9\xee\xcb\xf1\x62\x0c\xde\x60\x39\xdb\x2b\xa4\xbe\x60\x00\xd3\x8c\x0a\x46\x69\x36\xdf\x19\x95\xa7\x08\x0b\x4a\x7b\x68\x36\x42\xcd\x3e\xc6\x4e\xac\xe4\x8b\xfa\xe3\xa0\xa7\xe4\x0e\x35\x3a\x77\x6d\xcd\x2d\xf6\x92\xe6\x8f\x7f\xce\xde\x23\x1d\x51\xfd\x71\x62\x83\xbe\x80\x3f\xdc\xdc\x5c\xaf\x96\xf7\xd8\x19\xa7\x0d\x83\xc5\x08\xc3\xf8\x15\xde\xd7\xc2\x90\x37\x44\x47\x6a\x49\x92\xab\xb7\xa8\x78\xb1\x42\x61\x74\xec\x18\xbc\x8c\x86\x2a\x24\x53\x34\x39\x8d\xf2\x0f\xe6\x1c\x8a\xdc\x4a\x2a\x2e\x8d\x26\xbc\x3b\x0e\x85\xfb\xd7\xf6\xda\xca\x9d\x54\xb8\xc6\x77\x4e\x70\x55\xf7\x1c\x83\x84\x2b\x87\xc3\x0b\x2d\xf2\xf8\x8b\x56\xc5\x57\x63\xe8\x0f\xa9\xd0\x15\x8e\x30\x65\x40\x36\x3f\x96\xcc\xf5\x1b\xf7\xa7\x43\xeb\xbb\x3f\x3a\x1f\x61\xb6\xb3\xf4\xc5\x80\x5b\x1d\x26\x50\x3b\x2c\xe0\x30\x89\x46\x73\x3a\xd1\x99\x65\x29\x13\x58\x23\x84\xef\xee\x32\xe3\xf0\xda\xf7\x5f\x54\x55\x57\x26\xae\xff\x2f\x4b\xd4\x71\x55\x75\x2d\x5a\xb7\x67\xbd\xe7\xd4\x89\x61\x75\xa7\xde\x5c\x5e\x7b\x3b\xbe\x1f\xd7\x34\x34\x04\x55\x55\x96\x03\x52\x4d\x68\xaa\xbc\xfe\xa9\xd4\x1f\xa0\x93\xdb\xd0\xd3\xa6\x28\x61\x9a\x29\xbf\xa6\x1f\x12\x99\x22\xf1\x98\x13\x3f\xce\xad\xd6\x86\x9a\x09\x3a\x56\xc0\x28\x84\x49\xb3\xb0\xab\x8f\x90\xab\x6c\xc3\x8f\x66\x6b\x66\x62\x06\x67\x36\xd7\xbe\xd6\x16\x31\x26\x3c\x57\x74\x36\x55\xb9\x55\xff\x01\x7b\xd4\xb0\x7f\xda\x94\x86\x5f\xf3\x4c\x1c\x0f\xfb\xe9\x84\x0d\x27\xfe\x11\x97\xed\xce\xc3\x28\x7c\x75\x7f\xee\x47\x51\x34\x9c\xfb\x3f\x34\xce\x7e\xbf\xbe\x85\x5f\x32\x4c\x1f\x3f\x4b\xa3\x28\xfa\x17\x66\xe9\xd4\x54\x9a\xae\x96\x87\x1a\xbf\xad\x8e\xd7\x11\xf3\x7f\xfc\xd8\xf8\x27\x00\x00\xff\xff\x8a\x81\x7e\x66\x9a\x12\x00\x00")

func yamlSidecarsDashboardRecommendedConfBytes() ([]byte, error) {
	return bindataRead(
		_yamlSidecarsDashboardRecommendedConf,
		"yaml/sidecars/dashboard/recommended.conf",
	)
}

func yamlSidecarsDashboardRecommendedConf() (*asset, error) {
	bytes, err := yamlSidecarsDashboardRecommendedConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "yaml/sidecars/dashboard/recommended.conf", size: 4762, mode: os.FileMode(420), modTime: time.Unix(1590460659, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _yamlSidecarsDashboardUserConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x41\x4e\xc4\x30\x0c\x45\xf7\x39\x85\x2f\xd0\x22\x76\x28\x5d\x01\x0b\xf6\xc3\x09\xdc\xc4\x30\xa6\x1d\xbb\xb2\x93\x59\x80\xe6\xee\x68\x5a\x04\x19\xa4\x66\x11\x29\x7a\xf1\xff\xfe\x5f\xf0\x44\xbe\x60\x22\x98\xea\x48\x26\x54\xc8\xbb\x8c\x7e\x1c\x15\x2d\x0f\x21\xbc\x92\x9d\x39\xd1\x63\x4a\x5a\xa5\xc4\xf3\x3d\x60\x3e\xb1\x74\xd5\xc9\x86\x10\x9e\xe7\xea\x85\xec\xa0\x33\x3d\xb1\x64\x96\xf7\x68\x23\xa6\x1e\x6b\x39\xaa\xf1\x27\x16\x56\xe9\xa7\x07\xef\x59\xef\x6e\x86\xe1\x2b\x00\x00\x98\xce\x74\xa0\xb7\x9f\xd7\xf5\xe0\xc2\x2f\xa6\x75\x89\xb0\xab\x34\xfc\x7e\x9e\x58\x72\x84\x66\x8b\x3f\x74\x8d\x16\x21\x6d\xa8\x5b\x8d\x37\x78\x59\x6f\xaf\xe3\x07\xa5\xe2\x8d\xf3\x26\x76\x9b\xf8\xbf\x5e\x9b\xbe\x25\x6b\x89\x71\xa7\xc5\xcd\xf5\x12\xbe\x03\x00\x00\xff\xff\x10\xcb\x5e\x90\x6e\x01\x00\x00")

func yamlSidecarsDashboardUserConfBytes() ([]byte, error) {
	return bindataRead(
		_yamlSidecarsDashboardUserConf,
		"yaml/sidecars/dashboard/user.conf",
	)
}

func yamlSidecarsDashboardUserConf() (*asset, error) {
	bytes, err := yamlSidecarsDashboardUserConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "yaml/sidecars/dashboard/user.conf", size: 366, mode: os.FileMode(420), modTime: time.Unix(1590460659, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _yamlVik8sApiServerConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\x31\xaa\xc3\x30\x0c\xc6\xf1\x3d\xa7\xd0\x05\x5e\xde\xd0\xd0\xc1\x99\x4a\xa7\xd0\x25\xd0\xd2\xdd\x71\xbf\x21\x34\x8e\x8d\xe4\x04\x8a\xd1\xdd\x4b\x9c\x8c\xd5\xf0\x07\xc1\x4f\x48\xc0\xeb\xe8\x40\x39\xd7\xb7\x65\x80\x7d\xf9\xfa\x12\xc7\x3b\x78\x05\xab\x52\xae\x88\x88\x04\x13\x5c\x0a\x7c\xac\xdb\xb8\xe0\x63\x98\x31\x27\x43\xef\x65\xc0\x9f\x8d\xa3\x94\xa3\xb6\x10\x2d\x9d\xad\x87\x44\xeb\x70\x20\xf9\x48\x82\xdf\x85\x9b\x16\x49\xe0\xae\x37\x3f\x7f\x3f\xbb\x5e\x75\x97\x31\x70\x32\x74\x6e\x9a\x93\xd9\xf2\xff\xb8\xf6\x6d\xa5\xdf\x00\x00\x00\xff\xff\x95\x41\x8e\xac\xb9\x00\x00\x00")

func yamlVik8sApiServerConfBytes() ([]byte, error) {
	return bindataRead(
		_yamlVik8sApiServerConf,
		"yaml/vik8s-api-server.conf",
	)
}

func yamlVik8sApiServerConf() (*asset, error) {
	bytes, err := yamlVik8sApiServerConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "yaml/vik8s-api-server.conf", size: 185, mode: os.FileMode(420), modTime: time.Unix(1590460659, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"yaml/cni/flannel.conf":                    yamlCniFlannelConf,
	"yaml/ingress/nginx.conf":                  yamlIngressNginxConf,
	"yaml/ingress/traefik.conf":                yamlIngressTraefikConf,
	"yaml/kubeadm-config.yaml":                 yamlKubeadmConfigYaml,
	"yaml/sidecars/dashboard/alternative.conf": yamlSidecarsDashboardAlternativeConf,
	"yaml/sidecars/dashboard/ingress.conf":     yamlSidecarsDashboardIngressConf,
	"yaml/sidecars/dashboard/recommended.conf": yamlSidecarsDashboardRecommendedConf,
	"yaml/sidecars/dashboard/user.conf":        yamlSidecarsDashboardUserConf,
	"yaml/vik8s-api-server.conf":               yamlVik8sApiServerConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"yaml": &bintree{nil, map[string]*bintree{
		"cni": &bintree{nil, map[string]*bintree{
			"flannel.conf": &bintree{yamlCniFlannelConf, map[string]*bintree{}},
		}},
		"ingress": &bintree{nil, map[string]*bintree{
			"nginx.conf":   &bintree{yamlIngressNginxConf, map[string]*bintree{}},
			"traefik.conf": &bintree{yamlIngressTraefikConf, map[string]*bintree{}},
		}},
		"kubeadm-config.yaml": &bintree{yamlKubeadmConfigYaml, map[string]*bintree{}},
		"sidecars": &bintree{nil, map[string]*bintree{
			"dashboard": &bintree{nil, map[string]*bintree{
				"alternative.conf": &bintree{yamlSidecarsDashboardAlternativeConf, map[string]*bintree{}},
				"ingress.conf":     &bintree{yamlSidecarsDashboardIngressConf, map[string]*bintree{}},
				"recommended.conf": &bintree{yamlSidecarsDashboardRecommendedConf, map[string]*bintree{}},
				"user.conf":        &bintree{yamlSidecarsDashboardUserConf, map[string]*bintree{}},
			}},
		}},
		"vik8s-api-server.conf": &bintree{yamlVik8sApiServerConf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
