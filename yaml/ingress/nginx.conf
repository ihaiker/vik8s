namespace ingress-nginx;

configmap: nginx-configuration;
configmap: tcp-services;
configmap: udp-services;

ServiceAccount:v1 nginx-ingress-serviceaccount;

{{.Repo.ReduceSecret}}

ClusterRole:rbac.authorization.k8s.io/v1beta1 nginx-ingress-clusterrole {
    rules {
        apiGroups: "";
        resources: configmaps endpoints nodes pods secrets;
        verbs: list watch;
    }
    rules {
        apiGroups: "";
        resources: nodes;
        verbs: get;
    }
    rules {
        apiGroups: "";
        resources: services;
        verbs: get list watch;
    }
    rules {
        apiGroups: "";
        resources: events;
        verbs: create patch;
    }
    rules {
        apiGroups: "extensions" "networking.k8s.io";
        resources: ingresses;
        verbs: get list watch;
    }
    rules {
        apiGroups: "extensions" "networking.k8s.io";
        resources: "ingresses/status";
        verbs: update;
    }
}

Role:rbac.authorization.k8s.io/v1beta1 nginx-ingress-role {
    rules {
        apiGroups: "";
        resources: configmaps pods secrets namespaces;
        verbs: get;
    }
    # Defaults to "<election-id>-<ingress-class>"
    # Here: "<ingress-controller-leader>-<nginx>"
    # This has to be adapted if you change either parameter
    # when launching the nginx-ingress-controller.
    rules {
        apiGroups: "";
        resources: configmaps;
        resourceNames: "ingress-controller-leader-nginx";
        verbs: get update;
    }
    rules {
        apiGroups: "";
        resources:  configmaps;
        verbs: create;
    }
    rules {
        apiGroups: "";
        resources: endpoints;
        verbs:  get;
    }
}

RoleBinding:rbac.authorization.k8s.io/v1beta1 nginx-ingress-role-nisa-binding {
    roleRef {
        apiGroup: rbac.authorization.k8s.io;
        kind: Role;
        name: nginx-ingress-role;
    }
    subjects {
        kind: ServiceAccount;
        name: nginx-ingress-serviceaccount;
        namespace: ingress-nginx;
    }
}


ClusterRoleBinding:rbac.authorization.k8s.io/v1beta1 nginx-ingress-clusterrole-nisa-binding {
    roleRef {
        apiGroup: rbac.authorization.k8s.io;
        kind: ClusterRole;
        name: nginx-ingress-clusterrole;
    }
    subjects {
        kind: ServiceAccount;
        name: nginx-ingress-serviceaccount;
        namespace: ingress-nginx;
    }
}

deployment nginx-ingress-controller {
    hostNetwork: "{{.HostNetwork}}";
    terminationGracePeriodSeconds: 300;
    serviceAccountName: nginx-ingress-serviceaccount;
    template {
        metadata {
            annotations {
                prometheus.io/port: "10254";
                prometheus.io/scrape: "true";
            }
        }
    }
    nodeSelector {
        {{range $key, $value := .NodeSelectors}}
            {{$key}}: {{$value}};
        {{end}}
    }

    {{.Repo.ReducePullSecrets}}

    containers nginx-ingress-controller "{{.Repo}}kubernetes-ingress-controller/nginx-ingress-controller:{{.Version}}" {
        args: "/nginx-ingress-controller"
        "--configmap=$(POD_NAMESPACE)/nginx-configuration"
        "--tcp-services-configmap=$(POD_NAMESPACE)/tcp-services"
        "--udp-services-configmap=$(POD_NAMESPACE)/udp-services"
        "--publish-service=$(POD_NAMESPACE)/ingress-nginx"
        "--annotations-prefix=nginx.ingress.kubernetes.io"
        "--enable-ssl-passthrough";

        securityContext {
            allowPrivilegeEscalation: true;
            capabilities {
                drop: ALL;
                add: NET_BIND_SERVICE;
            }
            runAsUser: 101;
        }
        envs {
            POD_NAME field metadata.name;
            POD_NAMESPACE field metadata.namespace;
        }
        ports {
            http 80/tcp;
            https 443/tcp;
        }

        livenessProbe {
            failureThreshold: 3;
            httpGet{
                path: /healthz;
                port: 10254;
                scheme: HTTP;
            }
            initialDelaySeconds: 10;
            periodSeconds: 10;
            successThreshold: 1;
            timeoutSeconds: 10;
        }
        readinessProbe {
            failureThreshold: 3;
            httpGet {
                path: /healthz;
                port: 10254;
                scheme: HTTP;
            }
            periodSeconds: 10;
            successThreshold: 1;
            timeoutSeconds: 10;
        }
        lifecycle {
            preStop {
                exec {
                    command: "/wait-shutdown";
                }
            }
        }
    }
}

LimitRange:v1 ingress-nginx {
    limits {
        min memory=90Mi cpu=100m;
        type: Container;
    }
}

service deployment:nginx-ingress-controller ingress-nginx
    "{{if and (ge .NodePortHttp 0) (ge .NodePortHttps 0) }}NodePort{{end}}" {
    ports {
        http 80:80/tcp "{{if gt .NodePortHttp 0}}{{.NodePortHttp}}{{end}}";
        https 443:443/tcp "{{if gt .NodePortHttps 0}}{{.NodePortHttps}}{{end}}";
    }
}